name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-22.04, windows-2022]
        build_type: [Release]
        python_version: [3.10.11]  # Has to match the version that was used to build USD
        usd_version: [2411]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.SUBMODULE_KEY }}

    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python_version }}

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "build-install-dir=${{ github.workspace }}/build/install" >> "$GITHUB_OUTPUT"

    - name: Install Dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install doxygen valgrind libx11-dev libglew-dev libglew-dev libxrandr-dev libxcursor-dev libxinerama-dev libxi-dev
    - name: Install Dependencies (Windows)
      if: runner.os == 'Windows'
      run: choco install doxygen.install
    - name: Install Dependencies (MacOS)
      if: runner.os == 'macOS'
      run: brew install clang-format doxygen

    - name: Install Python Dependencies
      run: pip3 install sphinx breathe sphinx-rtd-theme

    - name: Download USD release
      run: gh release download USD-${{ matrix.usd_version }}-Artifacts -p "usd-${{ matrix.usd_version }}-${{ matrix.os }}.zip" --repo adobe/USD-Fileformat-plugins
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Unzip USD release (Windows)
      if: runner.os == 'Windows'
      run: Expand-Archive -Path "usd-${{ matrix.usd_version }}-${{ matrix.os }}.zip" -DestinationPath usd_build -Force

    - name: Unzip USD release (Unix)
      if: runner.os != 'Windows'
      run: unzip -q usd-${{ matrix.usd_version }}-${{ matrix.os }}.zip -d usd_build

    - name: Set Environment Variables
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          echo "${PYTHON_PATH}" >> "$GITHUB_PATH"
          echo "${{ github.workspace }}/usd_build/bin" >> "$GITHUB_PATH"
          echo "${{ github.workspace }}/usd_build/lib" >> "$GITHUB_PATH"
          echo "${{ github.workspace }}/usd_build/lib64" >> "$GITHUB_PATH"
          echo "${{ github.workspace }}/usd_build/plugin/usd" >> "$GITHUB_PATH"
          echo "PXR_PLUGINPATH_NAME=${{ github.workspace }}/bin/plugin/usd;${{ github.workspace }}/usd_build/plugin/usd" >> "$GITHUB_ENV"
        else
          # Concatenate paths for LD_LIBRARY_PATH
          echo "${PYTHON_PATH}" >> "$GITHUB_PATH"
          echo "${{ github.workspace }}/usd_build/bin" >> "$GITHUB_PATH"
          echo "${{ github.workspace }}/usd_build/lib" >> "$GITHUB_PATH"
          echo "${{ github.workspace }}/usd_build/lib64" >> "$GITHUB_PATH"
          echo "${{ github.workspace }}/usd_build/plugin/usd" >> "$GITHUB_PATH"
          ldLibraryPath="${{ github.workspace }}/usd_build/bin:"
          ldLibraryPath+="${{ github.workspace }}/usd_build/lib:"
          ldLibraryPath+="${{ github.workspace }}/usd_build/lib64:"
          ldLibraryPath+="${{ github.workspace }}/usd_build/plugin/usd:"
          echo "LD_LIBRARY_PATH=$ldLibraryPath" >> "$GITHUB_ENV"
          echo "PXR_PLUGINPATH_NAME=${{ github.workspace }}/bin/plugin/usd:${{ github.workspace }}/usd_build/plugin/usd" >> "$GITHUB_ENV"
        fi
        USD_BUILD_PATH="${{ github.workspace }}/usd_build"
        USD_BUILD_PATH="${USD_BUILD_PATH//\\//}"
        echo "USD_BUILD_PATH=$USD_BUILD_PATH" >> "$GITHUB_ENV"
        echo "PYTHONPATH=${{ github.workspace }}/usd_build/lib/python:${PYTHONPATH}" >> "$GITHUB_ENV"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_INSTALL_PREFIX=${{ steps.strings.outputs.build-install-dir }}
        -DCXX11_ABI=off
        -S ${{ github.workspace }}

    - name: Build
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ./ --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -VV --build-config ${{ matrix.build_type }}

    - name: Documentation
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: cmake --build ./ --target docs

    - name: Format Checks
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Disable clang-format on Ubuntu as the version of Ubuntu we are targetting
      # is incompatible with our .clang-format file
      run: |
        if [ "${{ runner.os }}" != "Linux" ]; then
          cmake --build ./ --target format-check
        fi

    - name: Install
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: cmake --build ./ --config ${{ matrix.build_type }} --target install
